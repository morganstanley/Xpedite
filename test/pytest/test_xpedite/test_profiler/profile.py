"""
This module contains various functions used in testing xpedite profiling, including
xpedite record, report and profile info generation, as well as loading profile and application
information from remote or local hosts.

Author:  Brooke Elizabeth Cantwell, Morgan Stanley
"""

import os
from test_xpedite.test_profiler.app         import TargetLauncher
from test_xpedite.test_profiler.comparator  import findDiff
from xpedite.profiler.probeAdmin            import ProbeAdmin

TEST_DIR = os.path.abspath(os.path.dirname(__file__))
DATA_DIR = os.path.join(TEST_DIR, '..', 'data')

def loadProfileInfo(profileInfoPath, remote=None):
  """
  Load profile information from a profileInfo.py file, set a default application information
  file, and set the profile information's host if the application is running remotely

  @param remote: Remote environment information if a remote host is passed to the pytest parser
  @type remote: C{xpedite.transport.remote.Remote}
  """
  import xpedite.profiler.profileInfo
  profileInfo = xpedite.profiler.profileInfo.loadProfileInfo(os.path.join(DATA_DIR, profileInfoPath))
  if remote:
    profileInfo.appHost = remote.host
  return profileInfo

def generateProfiles(app, profileInfo):
  """
  Start Xpedite profiling and return the profiles and result generating by profiling

  @param app: An xpedite application
  @type app: C{xpedite.app.XpediteApp} or C{xpedite.app.XpediteDormantApp}
  @param profileInfo: Profile information generated by xpedite
  @type profileInfo: C{xpedite.profileInfoLoader.ProfileInfo}
  """
  from xpedite.jupyter.result   import Result
  from xpedite.profiler         import Profiler
  result = Result()
  profiler = Profiler.profile(
    app=app, profileInfo=profileInfo, reportName='XpediteTest', reportPath=None,
    dryRun=app.dryRun, result=result, interactive=False, heartbeatInterval=1
  )
  return profiler.profiles, result

def runXpediteReport(runId, profileInfo, sampleFilePath=None, cpuInfo=None, workspace=None):
  """
  Run xpedite report

  @param dataFilePath: File path to override an app's sample file path
  to a data file in the test data directory
  """
  from xpedite.profiler.app import XpediteDormantApp
  xpediteApp = XpediteDormantApp(profileInfo.appName, profileInfo.appHost, profileInfo.appInfo, runId, workspace)
  if sampleFilePath:
    xpediteApp.sampleFilePath = sampleFilePath
  xpediteApp.start()
  if cpuInfo:
    xpediteApp.env.proxy.fullCpuInfo = cpuInfo
  reportProfiles, result = generateProfiles(xpediteApp, profileInfo)
  xpediteApp.stop()
  return reportProfiles, result

def runXpediteRecord(binary, profileInfo, txnCount, threadCount, remote=None, workspace=None):
  """
  Run xpedite record against a live target application process
  """
  with TargetLauncher(binary, profileInfo, txnCount, threadCount, workspace, remote) as app:
    recordProfiles, result = generateProfiles(app.xpediteApp, profileInfo)
  return app, recordProfiles, result

def loadProbes(binary, profileInfo, txnCount, threadCount, remote=None, workspace=None):
  """
  Generate a probe map to test the state of application probes
  """
  with TargetLauncher(binary, profileInfo, txnCount, threadCount, workspace, remote) as app:
    return ProbeAdmin.loadProbes(app.xpediteApp)

def loadBaseline(baselinePath):
  """
  Load a baseline .xpd file generated when a Jupyter notebook is built
  to compare to profile information from test record and report runs
  """
  from xpedite.jupyter.xpediteData import XpediteDataReader
  baselineProfileFile = os.path.join(DATA_DIR, baselinePath)
  with XpediteDataReader(baselineProfileFile) as xpediteDataReader:
    profiles = xpediteDataReader.getData('profiles')
  return profiles

def compareAgainstBaseline(profileInfoPath, baselinePath, workspace=None):
  """
  Compare profiles with benchmarks and profiles without benchmarks against existing profiles
  """
  import json
  profileInfo = loadProfileInfo(profileInfoPath)
  runId = collectDataFiles()
  baselineProfiles = loadBaseline(baselinePath)
  with open(os.path.join(DATA_DIR, 'reportCmdData', 'baselineCpuInfo.json')) as fileHandle:
    fullCpuInfo = json.load(fileHandle)
  sampleFilePath = '{}/reportCmdData/xpedite-*-{}-[0-9]*.data'.format(DATA_DIR, runId)
  reportProfiles, _ = runXpediteReport(
    runId, profileInfo, sampleFilePath=sampleFilePath, cpuInfo=fullCpuInfo, workspace=workspace
  )
  reportProfiles.transactionRepo = None # transactionRepo not stored in .xpd files
  reportProfiles.cpuInfo.cpuId = baselineProfiles.cpuInfo.cpuId 
  findDiff(reportProfiles.__dict__, baselineProfiles.__dict__)
  assert reportProfiles == baselineProfiles

def collectDataFiles():
  """
  Collect data files from the test directory mapping xpedite run ids to data files for the run
  """
  runId = None
  for fileName in os.listdir(os.path.join(DATA_DIR, 'reportCmdData')):
    if fileName.endswith('.data'):
      words = fileName.split('-')
      runId = (words[2])
      return runId

def generateProfileInfo(binary, profileInfo, txnCount, threadCount, remote=None, workspace=None):
  """
  Use Xpedite's profile information generator to generate a new profileInfo.py
  file for an xpedite application and compare the new profile information to
  baseline profile information
  """
  from xpedite.profiler.profileInfoGenerator import ProfileInfoGenerator
  with TargetLauncher(binary, profileInfo, txnCount, threadCount, workspace, remote) as app:
    probes = ProbeAdmin.loadProbes(app.xpediteApp)
    profiler = os.path.join(os.path.dirname(TEST_DIR), 'scripts/bin/xpedite')
    profileInfo.appInfo = os.path.join(app.tempDir, 'xpedite-appinfo.txt')
    generator = ProfileInfoGenerator(
      app.xpediteApp.executableName, profileInfo.appHost, os.path.basename(profileInfo.appInfo),
      probes, profiler
    )
    generator.generate()
  return generator.filePath

def buildNotebook(binary, txnCount, threadCount, remote=None, profileInfoPath=None, runId=None, workspace=None):
  """
  Test to confirm a Jupyter notebook can be creating from profile information and results
  generated by xpedite record
  """
  import tempfile
  import xpedite.jupyter.driver
  from xpedite.benchmark import makeBenchmark
  profileInfoPath = profileInfoPath if profileInfoPath else os.path.join(DATA_DIR, 'profileInfo.py')
  profileInfo = loadProfileInfo(profileInfoPath, remote)
  (profiles, app, result) = (None, None, None)
  if not runId:
    app, profiles, result = runXpediteRecord(binary, profileInfo, txnCount, threadCount, remote, workspace=workspace)
    runId = app.xpediteApp.runId
  else:
    profiles, result = runXpediteReport(runId, profileInfo, workspace=workspace)

  tempDir = tempfile.mkdtemp()
  tempDataDir = os.path.join(tempDir, 'xpData')
  os.mkdir(tempDataDir)
  notebookPath = os.path.join(tempDir, 'xpediteTest.ipynb')
  dataFilePath = os.path.join(tempDir, 'xpData/xpediteTest.xpd')
  notebook = xpedite.jupyter.driver.buildNotebook(
    profileInfo.appName, result, profiles, notebookPath, dataFilePath, runId
  )
  return notebook, dataFilePath, app, result, profiles
